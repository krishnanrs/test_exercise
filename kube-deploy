#!/usr/bin/env python
"""Launch or delete kubernetes services using yaml resource templates"""

import argparse
import json
import logging
import os
import re
import sys
import subprocess
import yaml
import re
from unit_test import UnitTest


class CommandFailed(Exception):
    """An exception to track that a command failed to execute successfully.

    Carries the exit code of the command that failed in `exit_code`.
    """
    def __init__(self, exit_code, message=''):
        Exception.__init__(self)
        self.exit_code = exit_code
        self.message = message


class CommandFormatter(argparse.ArgumentDefaultsHelpFormatter,
                       argparse.RawDescriptionHelpFormatter):
    """Argparse formatter to display __doc__ string correctly"""
    pass

parser = argparse.ArgumentParser(description=__doc__,
                                 formatter_class=CommandFormatter)
parser.add_argument('-v', '--verbose', dest='verbose',
                    action='store_true',
                    help='Be more verbose about what kube-deploy is doing.')
parser.add_argument('-n', '--namespace', default='default',
                    help='The namespace to use for deployments. Defaults to default namespace')
parser.add_argument('-f', '--deploymentfile',
                    help='File or URL containing the application deployment template')
parser.add_argument('-s', '--servicename', default='book-info',
                    help='Service name to use for the deployment')
parser.add_argument('-e', '--nodeport', dest='nodeport', default=None,
                    help='Expose deployment with a Nodeport')
parser.add_argument('action', metavar='action', type=str, default=None,
                    choices=['delete', 'deploy', 'show', 'run-tests', 'benchmark'],
                    help='deploy, delete or show a deployment')

log = logging.getLogger('kube-deploy')


def cmd(command, input='', quiet=True, ignore_errors=False, out_stderr=True):
    """Run cmd and return exit status or output"""

    stderr = subprocess.STDOUT
    if not out_stderr:
        stderr = subprocess.PIPE

    if not isinstance(command, list):
        command = command.split(' ')

    log.debug('Running cmd: "%s"', ' '.join(command))

    proc = subprocess.Popen(command, stdout=subprocess.PIPE,
                            stderr=stderr,
                            stdin=subprocess.PIPE)

    # Sometimes process closes before we can write to stdin
    # Catch the real error below unless ignore_errors
    stdin_fail = False
    try:
        proc.stdin.write(input)
        proc.stdin.close()
    except IOError:
        stdin_fail = True

    out = ''
    while True:
        nextline = proc.stdout.readline()
        out += nextline
        if nextline == '' and proc.poll() is not None:
            break
        if not quiet:
            sys.stdout.write(nextline)
            sys.stdout.flush()

    if stdin_fail:
        log.warn('Failed to write input for cmd: %s', command)
        log.debug('stdin: %s', input)
        log.debug('stdout: %s', out)

    if proc.returncode > 0 and ignore_errors is False:
        err_mesg = 'Cmd %s failed with: %s', command, out
        log.critical(err_mesg)
        raise CommandFailed(proc.returncode, out)

    return out

def parse_node_port(output):
    """Parse the hostname and node port from output data"""
    host = None
    port = None
    m = re.search('(^LoadBalancer Ingress:\s+)(\w+)', output, re.MULTILINE)
    if m:
        host = m.group(2)
    m = re.search('(^NodePort:\s+)(\S+)(\s+)(\d+)(\S+)', output, re.MULTILINE)
    if m:
        port = m.group(4)
    return host, port

def main():
    """Setup and invoke kubectl command"""
    logging.basicConfig(stream=sys.stderr,
                        format='[%(levelname)s] %(message)s')

    args = parser.parse_args()

    if args.verbose:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)

    if args.action in ['deploy', 'delete'] and args.servicename is None:
        parser.error('deploy and delete actions require a servicename to be specified')
    if args.action in ['deploy', 'delete'] and args.deploymentfile is None:
        parser.error('deploy and delete actions require a deploymentfile to be specified')

    if args.namespace != 'default':
        # Create namespace and ignore error if it already exists
        cmd('kubectl create namespace %s' % (args.namespace), ignore_errors=True)

    if args.action == 'show' or args.action == 'run-tests' or args.action == 'benchmark':
        output = cmd('kubectl -n %s describe services %s' % (args.namespace, args.servicename))
        host, port = parse_node_port(output)

    if args.action == 'deploy':
        cmd('kubectl -n %s apply -f %s' % (args.namespace, args.deploymentfile))
        if args.nodeport:
            output = cmd('kubectl get deployments')
            if args.nodeport in output:
                output = cmd('kubectl get service %s' % args.servicename, ignore_errors=True)
                if 'NotFound' in output:
                    output = cmd('kubectl -n %s expose deployment %s --type=NodePort --name=%s' % (
                        args.namespace, args.nodeport, args.servicename))
                    host, port = parse_node_port(output)
                    if host is not None and port is not None:
                        log.info('Application running at http://%s:%s', host, port)
            else:
                log.info('Cannot find deployment named %s', args.nodeport)

    if args.action == 'show':
        print(cmd('kubectl -n %s get deployments' % (args.namespace)))
        if host is not None and port is not None:
            log.info('Application running at http://%s:%s', host, port)

    if args.action == 'run-tests':
        if host is not None and port is not None:
            log.info('Running unit tests')
            tests = UnitTest('http://%s:%s' % (host, port))
            tests.run_all_tests()

    if args.action == 'benchmark':
        log.info('Running benchmark tests')
        if host is not None and port is not None:
            output = cmd('wrk2 -t2 -c100 -d30s -R2000 --u_latency http://%s:%s/api/v1/products' % (host, port))
            print(output)

    if args.action == 'delete':
        output = cmd('kubectl get service %s' % args.servicename, ignore_errors=True)
        if 'NotFound' not in output:
            cmd('kubectl -n %s delete service %s' % (args.namespace, args.servicename))
        cmd('kubectl delete -n %s -f %s' % (args.namespace, args.deploymentfile))


if __name__ == '__main__':
    main()
